// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    password      String?
    roleType      String?
    roles         Role?      @relation(fields: [roleType], references: [type], onDelete: SetDefault)
    accounts      Account[]
    sessions      Session[]
    Favorites     Favorite[]
    Palettes      Palette[]
    Owned         Owned[]
    Forks         Fork[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Role {
    id    String @id @default(cuid())
    type  String @unique @default("anonymous")
    value Int    @unique @default(0)
    user  User[]
}

model Color {
    id         String     @id @default(cuid())
    hex        String     @unique
    rgb        String     @unique
    hsl        String     @unique
    cmyk       String     @unique
    hsv        String     @unique
    name       String?
    contrast   String?
    complement String?
    text       String?
    Palette    Palette?   @relation(fields: [paletteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    paletteId  String?
    tags       Tag[]
    Favorite   Favorite[]
}

model Palette {
    id        String     @id @default(cuid())
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    serial    String     @unique // @db.Text
    name      String     @unique // @db.Text
    private   Boolean?   @default(true)
    Colors    Color[]
    user      User       @relation(fields: [userId], references: [id])
    userId    String     @unique // @db.Text
    Tags      Tag[]
    Favorites Favorite[]
    Owned     Owned[]
    Forks     Fork[]
}

model Owned {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId    String // @db.Text
    Palette   Palette? @relation(fields: [paletteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    paletteId String? // @db.Text

    @@unique([userId, paletteId])
}

model Fork {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId    String // @db.Text
    Palette   Palette? @relation(fields: [paletteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    paletteId String? // @db.Text

    @@unique([userId, paletteId])
}

model Tag {
    id           String   @id @default(cuid())
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    name         String   @unique // @db.Text
    Palette      Palette? @relation(fields: [paletteId], references: [id])
    paletteId    String? // @db.Text
    Color        Color?   @relation(fields: [colorId], references: [id])
    colorId      String? // @db.Text
    paletteCount Int?     @default(0)
    colorCount   Int?     @default(0)

    @@unique([name, paletteId])
    @@unique([name, colorId])
}

model Favorite {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId    String // @db.Text
    Palette   Palette? @relation(fields: [paletteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    paletteId String? // @db.Text
    Color     Color?   @relation(fields: [colorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    colorId   String? // @db.Text

    @@unique([userId, paletteId])
    @@unique([userId, colorId])
}

// @TODO: ADD ACHIEVEMENTS: ie, added first palette, etc.
// a new user gets a related acheivemsnt list to complement with flags for each achievement

// @TODO: Consider adding known brand colors.

// @TODO: Add ability to emote on a color or palette
// ask the quesiton how does this color make you feel?
// if they interact with it then show then the actual emotion the color conveys and the consensus //
// of the community
